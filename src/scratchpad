import React, {useState, useEffect} from 'react'
import './App.css'
import Snake from './components/Snake'
import Food from './components/Food'

const getRandomCoords = () => {
  let min = 1
  let max = 98
  let x = Math.floor((Math.random() * (max-min+1) + min) / 2) * 2
  let y = Math.floor((Math.random() * (max-min+1) + min) / 2) * 2
  return [x,y]
}

const App = () => {

  const [speed, setSpeed] = useState(200)
  const [direction, setDirection] = useState("RIGHT")
  const [snakeDots, setSnakeDots] = useState([[0,0], [2,0]])
  const [food, setFood] = useState(getRandomCoords)
  const [initialState, setInitalState] = useState(food, direction, snakeDots, speed)

  useEffect(() => {
    setInterval(moveSnake , speed)
    document.onkeydown = onKeyDown
  }, [])
  
  useEffect(() => {
    outOfBorderCheck()
    collapseCheck()
    checkIfEat()
  }, [])

  const onKeyDown = e => {
    e = e || window.event
    switch (e.keyCode) {
      case 38:
        setDirection("UP")
        break
      case 40:
        setDirection("DOWN")
        break
      case 37:
        setDirection("LEFT")
        break
      case 39:
        setDirection("RIGHT")
        break
    }
  }

  const moveSnake = () => {
    let dots = [...snakeDots]
    let head = dots[dots.length - 1]
  
    switch (direction) {
      case "RIGHT":
        head = [ head[0] + 2, head[1] ]
        break
      case "LEFT":
        head = [ head[0] - 2, head[1] ]
        break
      case "DOWN":
        head = [ head[0], head[1] + 2 ]
        break
      case "UP":
        head = [ head[0], head[1] - 2 ]
        break
    }
    dots.push(head)
    dots.shift()
    setSnakeDots(dots)
  }

  const outOfBorderCheck = () => {
    let head = snakeDots[snakeDots.length - 1]
    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0 ) {
      onGameOver()
    }
  }

  const collapseCheck = () => {
    let snake = [...snakeDots]
    let head = snake[snake.length - 1]
    snake.pop()
    snake.forEach(dot => {
      if (head[0] === dot[0] && head[1] === dot[1]) {
        onGameOver()
      }
    })
  }

  const checkIfEat = () => {
    let head = snakeDots[snakeDots.length - 1]
    let foods = food
    if (head[0] === foods[0] && head[1] === foods[1]) {
      setFood(getRandomCoords())
      enlargeSnake()
      increaseSpeed()
    }
  }

  const enlargeSnake = () => {
    let newSnake = [...snakeDots]
    newSnake.unshift([])
    setSnakeDots(newSnake)
  }

  const increaseSpeed = () => {
    if (speed > 10) {
      setSpeed(speed - 10)
    }
  }

  const onGameOver = () => {
    alert(`Game Over. Snake length is ${snakeDots.length}`)
    setInitalState(initialState)
  }

    return (
      <div className="game-area">
        <Snake snakeDots={snakeDots} />
        <Food food={food} />
      </div>
    )
}

export default App;
